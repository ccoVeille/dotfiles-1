# vim: ft=sh

[[ $- != *i* ]] && return

## Aliases

alias clock='tty-clock -c'
alias cower='pacaur'
alias eof='IGNOREEOF=3'
alias eris='ssh wolke -t tmux attach -t eris'
alias fumount='fusermount -u'
alias gdm='sudo systemctl start gdm'
alias gmm='run google-musicmanager'
alias ip='ip -c'
alias journalctl='journalctl --no-hostname'
alias powerdown='udisksctl poweroff -b'
alias RM='/bin/rm -I'
alias unrm='trash --restore'

b64() { printf "%s" "$*" | base64 -w0; }

gensid() {
	local a=$(perl -e 'print int rand 0xFFFFFFFF')
	local b=$(perl -e 'print int rand 0xFFFFFFFF')
	local c=$(perl -e 'print int rand 0xFFFFFFFF')
	echo "S-1-5-21-$a-$b-$c"
}

oldssh() {
	ssh -o KexAlgorithms="+diffie-hellman-group1-sha1" \
	    -o HostKeyAlgorithms="+ssh-dss" \
	    -o Ciphers="+3des-cbc" \
	    "$@";
}

rand() { perl -e "print int rand $1"; }

rm() {
	local opts=() arg path nuke=() trash=()
	for arg; do
		if [[ $arg == -* ]]; then
			opts+=("$arg")
		elif case $(realpath -s "$arg") in
		# skip filesystems
		~/Private/*)		false;;
		~/fs/*)			false;;
		~/@*)			false;;
		# skip junk
		~/.local/share/Trash/*)	false;;
		*.tmp)			false;;
		.unison.*)		false;;
		# include $HOME
		~/*)			true;;
		/pub/*)			true;;
		# include removable drives
		/media/*)		true;;
		/mnt/*)			true;;
		/run/media/*)		true;;
		# exclude everything else elsewhere
		*)			false;;
		esac; then
			trash+=("$arg")
		else
			nuke+=("$arg")
		fi
	done
	if (( ${#trash[@]} )); then
		trash "${opts[@]}" -- "${trash[@]}"
	fi &&
	if (( ${#nuke[@]} )); then
		command rm -I "${opts[@]}" -- "${nuke[@]}"
	fi
}

rpw() {
	local pw=$(tr -dc "A-Za-z0-9" < /dev/urandom | head -c "${1:-12}")
	echo "$pw"
	if [[ -t 1 ]]; then
		clip "$pw"
	fi
}

sudo:() {
	if (( UID ))
		then do: sudo "$@"
		else do: "$@"
	fi
}

ukvpn() {
	local con="Utenos kolegija (admin)"
	for arg; do
		case $arg in
		    up|down)
			do: nmcli con "$arg" "$con";;
		    wan)
			do: nmcli con modify "$con" ipv4.never-default no;;
		    lan)
			do: nmcli con modify "$con" ipv4.never-default yes;;
		    *)
			echo "'$arg'?";;
		esac
	done
}

vnet() {
	local arg=${1:-status}
	case $arg in
		up) arg="start";;
		down) arg="stop";;
	esac
	sudo: systemctl $arg vm-network.target
}

youtube-dl() {
	local cmd=()
	cmd+=(
		systemd-inhibit
		--who "youtube-dl"
		--what "sleep"
		--why "Downloading a video"
	)
	cmd+=(
		gnome-inhibit -A
		--who "youtube-dl"
		--what "suspend"
		--why "Downloading a video"
	)
	cmd+=(
		youtube-dl
		--add-metadata
		--console-title
		--continue
		--format "bestvideo+m4a/bestvideo+bestaudio/best"
		"$@"
	)
	"${cmd[@]}"
}

:pp() {
	local var=$1 k=; local -n ref=$1
	echo "$var=("; for k in ${!ref[@]}; do echo "  [$k]='${ref[$k]}'"; done; echo ")"
}

nssdb="sql:$HOME/.pki/nssdb"
fxdb() { (nssdb="$HOME/.mozilla/firefox/ov6jazas.default"; "$@"); }
thdb() { (nssdb="$HOME/.thunderbird/1xrzgg5b.default"; "$@"); }

cu() { do: certutil -d "$nssdb" "$@"; }
mu() { do: modutil  -dbdir "$nssdb" "$@"; }
pe() { do: pesign   -n "$nssdb" "$@"; }
pu() { do: pk12util -d "$nssdb" "$@"; }
st() { do: signtool -d "$nssdb" "$@"; }

java-import-key() { keytool -importkeystore -srcstoretype PKCS12 -srckeystore "$@"; }
nss-import-key() { pu -i "$@"; }
