# vim: ft=sh

[[ $- != *i* ]] && return

## Completion

#if [[ -e /usr/share/bash-completion/bash_completion ]]; then
#	. /usr/share/bash-completion/bash_completion
#	# redeclare after bash-completion nukes it
#	have() { command -v "$@" &>/dev/null; }
#fi

## Aliases

alias @='_sshfs'
alias clock='tty-clock -c'
alias eof='IGNOREEOF=3'
alias fumount='fusermount -u'
alias gdm='sudo systemctl start gdm'
alias gmm='run google-musicmanager'
alias RM='/bin/rm -I'
alias unrm='trash --restore'

b64() { printf "%s" "$*" | base64 | tr -dc "A-Za-z0-9+/="; }

eris() { ssh wolke -t tmux attach -t eris; }
gale() { ssh wolke -t tmux attach -t gale; }

gensid() {
	local a=$(perl -e 'print int rand 0xFFFFFFFF')
	local b=$(perl -e 'print int rand 0xFFFFFFFF')
	local c=$(perl -e 'print int rand 0xFFFFFFFF')
	echo "S-1-5-21-$a-$b-$c"
}
rand() { perl -e "print int rand $1"; }

rm() {
	local opts=() arg path nuke=() trash=()
	for arg; do
		if [[ $arg == -* ]]; then
			opts+=("$arg")
		elif case $(realpath -s "$arg") in
		# skip filesystems
		~/Private/*)		false;;
		~/fs/*)			false;;
		~/@*)			false;;
		# skip system stuff
		~/lib/*)		false;;
		~/pkg/*)		false;;
		~/src/*)		false;;
		# skip dotfiles and temp
		#~/.*)			false;;
		~/.local/share/Trash/*)	false;;
		*.tmp)			false;;
		.unison.*)		false;;
		# include everything else in $HOME
		~/*)			true;;
		# include removable drives
		/media/*)		true;;
		/mnt/*)			true;;
		/run/media/*)		true;;
		# include stuff
		/pub/*)			true;;
		# exclude everything else elsewhere
		*)			false;;
		esac; then
			trash+=("$arg")
		else
			nuke+=("$arg")
		fi
	done
	if (( ${#trash[@]} )); then
		trash "${opts[@]}" -- "${trash[@]}"
	fi &&
	if (( ${#nuke[@]} )); then
		command rm -I "${opts[@]}" -- "${nuke[@]}"
	fi
}

rpw() {
	local pw=$(tr -dc "A-Za-z0-9" < /dev/urandom | head -c "${1:-12}")
	echo "$pw"
	if [[ -t 1 ]]; then
		clip "$pw"
	fi
}

sudo:() {
	if (( UID ))
		then do: sudo "$@"
		else do: "$@"
	fi
}

scrape-reddit() {
	(( $# )) || set -- $(pclip)
	local u; for u; do
		if [[ $u == *[./]reddit.com/r/* ]]; then
			local f=$(date +%s.%N)
			~/code/net/scrape-reddit-comment "$u" \
			| tee ~/tmp/Reddit/tmp/$f \
			&& mv ~/tmp/Reddit/{tmp,new}/$f
		else
			echo "ಠ_ಠ"
		fi
	done
}

_sshfs() {
	local host=$1
	local dir=~/@$host
	if ! mountpoint -q "$dir"; then
		mkdir -p "$dir" &&
		sshfs "$host:" "$dir" -o reconnect -o transform_symlinks
	fi &&
	echo "mounted at $dir"
}

vnet() { sudo: systemctl "${1:-status}" vm-network.target; }

youtube-dl() {
	local cmd=()
	cmd+=(
		systemd-inhibit
		--who "youtube-dl"
		--what "sleep"
		--why "Downloading a video"
	)
	cmd+=(
		gnome-inhibit -A
		--who "youtube-dl"
		--what "suspend"
		--why "Downloading a video"
	)
	cmd+=(
		youtube-dl
		--add-metadata
		--console-title
		--continue
		"$@"
	)
	"${cmd[@]}"
}

## Network hackery

add-vlan() {
	local dev=$1 addr=$2
	sudo: ip link add link "${dev%.*}" name "$dev" type vlan id "${dev##*.}"
	if [[ $addr == dhcp ]]; then
		run-dhcp "$dev"
	elif [[ $addr ]]; then
		[[ $addr == */* ]] || addr+="/16"
		sudo: ip link set "$dev" up
		sudo: ip addr add "$addr" dev "$dev"
	fi
}

run-autoip() { sudo: avahi-autoipd --force-bind "${1:-eth0}" "${@:2}"; }

run-dhcp() { sudo: dhclient -4 -d "${1:-eth0}" "${@:2}"; }

run-dhcpcd() {
	sudo: dhcpcd --ipv4only --noarp --reboot 0 --timeout 0 --nobackground \
		--nohook resolv.conf --debug "${1:-eth0}" "${@:2}"
}

ecap() { sudo: tcpdump -n -i "${dev:-eth0}" "$@"; }
earp() { ecap -e "arp or (udp port 67 or 68)"; }

ecn() {
	case $1 in
	    1|y*|on)
		sudo: sysctl -q net.ipv4.tcp_ecn=1;;
	    0|n*|off)
		sudo: sysctl -q net.ipv4.tcp_ecn=0;;
	    *)
		sysctl net.ipv4.tcp_ecn;;
	esac
}

ukip() {
	sudo: ip link set eth0 up
	sudo: ip addr flush dev eth0
	sudo: ip addr add 169.254.0.1/16  dev eth0 scope link
	sudo: ip addr add 10.128.0.42/16  dev eth0
	sudo: ip addr add 172.16.0.42/12  dev eth0
	sudo: ip addr add 192.168.0.42/24 dev eth0
	sudo: ip addr add 192.168.1.42/24 dev eth0
}

uredboot() { do: telnet 192.168.1.20 9000; }

## Certificate hackery

c2p() for _f; {
	openssl x509 -in "$_f" -inform DER -out "${_f%.*}.pem" -outform PEM
}

p2c() for _f; {
	openssl x509 -in "$_f" -inform PEM -out "${_f%.*}.crt" -outform DER
}

nssdb="sql:$HOME/.pki/nssdb"
fxdb() { (nssdb="$HOME/.mozilla/firefox/ov6jazas.default"; "$@"); }
thdb() { (nssdb="$HOME/.thunderbird/1xrzgg5b.default"; "$@"); }

cu() { do: certutil -d "$nssdb" "$@"; }
mu() { do: modutil  -dbdir "$nssdb" "$@"; }
pe() { do: pesign   -n "$nssdb" "$@"; }
pu() { do: pk12util -d "$nssdb" "$@"; }
st() { do: signtool -d "$nssdb" "$@"; }

java-import-key() { keytool -importkeystore -srcstoretype PKCS12 -srckeystore "$@"; }
nss-import-key() { pu -i "$@"; }

## Miscellany

:pp() {
	local var=$1 k=; local -n ref=$1
	echo "$var=("; for k in ${!ref[@]}; do echo "  [$k]='${ref[$k]}'"; done; echo ")"
}

## Prompt enhancements

parts[right]+=" (:nested?)<:parent"
parts[right]+=" (:lid:held?)<:lid"

_parent=$(</proc/$PPID/comm)
if [[ ${_parent%-} != @(sshd|sudo|*terminal) ]]; then
	items[nested?]=y
fi
items[parent]="$_parent #$SHLVL"
items[parent.pfx]='{'
items[parent.sfx]='}'
fmts[parent]='38;5;15'
fmts[parent.pfx]='38;5;198'

items[lid]="☀"
fmts[lid]='38;5;184'

_prompt_lid() {
	if [[ -e "$XDG_RUNTIME_DIR/nolid.lock" ]]; then
		items[lid:held?]=y
	else
		items[lid:held?]=
	fi
}

PROMPT_COMMAND="$PROMPT_COMMAND; _prompt_lid"
