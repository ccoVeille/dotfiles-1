#!/bin/bash
# vi: ft=sh
PGROUP=$(ps -o 'pgrp=' $$)

# <text> <background> <border>
WMII_NORMCOLORS='#888888 #222222 #333333'
WMII_FOCUSCOLORS='#ffffff #285577 #4c7899'
WMII_URGENTCOLORS='#ffffff #772828 #99784c'

WMII_BACKGROUND='#333333'
WMII_FONT='-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'

MODKEY="Mod4"
WMII_TERM='gnome-terminal'
WMII_TERM=xterm

#WMII_CONFPATH="$HOME/.wmii"
WMII_HISTORY="${WMII_CONFPATH%%:*}/history"

WMII_STARTUP="${WMII_CONFPATH%%:*}/startup"

spawn() { cd ~; wmiir setsid -f "$@"; }

startup() {
	cd ~

	status | wmiir create /rbar/status
	while status; do
		sleep 1
	done & echo "++ status[$!]"

	mpstatus_update & echo "++ mpstatus_update[$!]"

	[[ -f "$WMII_STARTUP" ]] && . "$WMII_STARTUP"
}

wmiir write /ctl <<!
	font $WMII_FONT
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod $MODKEY
	colmode default
	border 1
!
xsetroot -solid "$WMII_BACKGROUND" &

wmiir write /colrules <<'!'
	/gimp/ -> 17+83+41
	/.*/ -> 62+38 # Golden Ratio
!
# /client/*/props -> instance:class:label
wmiir write /rules <<'!'
	#/MPlayer|VLC/ floating=on
	/^ffplay:/ floating=on

	/^seahorse-agent:Seahorse-agent:/ floating=on
	/^bluetooth-properties:/ floating=on

	/^Pidgin:/ allow=+activate

	/^gnome-terminal:/ group=0
	/^ROX-Filer:/ group=0
!

status() {
	echo -n label $(uptime | sed 's/.*://; s/,//g') \
		'|' $(date +'%A, %b %d %H:%M:%S') \
		| wmiir write /rbar/status
}

tags() { wmiir ls /tag | sed 's|/$||;/^sel$/d'; }
current_tag() { wmiir read /tag/sel/ctl | head -n 1; }
next_tag() { tags | sed -n "1h;/^$(current_tag)\$/{\${g;p};n;p;q}"; }
prev_tag() { (tags | sed -n "/^$(current_tag)\$/{1q42;g;p;q};h") || (tags | sed -n "\$p"); }

event() {
	local evtype="$1"; shift
	# echo "== ($$) Event: [$evtype]" "$@"

	case "$evtype" in
	Start|Suicide)
		return 1
		;;
	
	CreateTag)
		{	echo colors "$WMII_NORMCOLORS"
			echo label "$*"
		} | wmiir create "/lbar/$*"
		;;
	DestroyTag)
		wmiir remove "/lbar/$*"
		;;
	FocusTag)
		{	echo colors "$WMII_FOCUSCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	UnfocusTag)
		{	echo colors "$WMII_NORMCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	UrgentTag)
		shift
		{	echo colors "$WMII_URGENTCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	NotUrgentTag)
		shift
		{	if [ "$*" = "$(current_tag)" ]; then
				echo colors "$WMII_FOCUSCOLORS"
			else
				echo colors "$WMII_NORMCOLORS"
			fi
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;

	LeftBarClick)
		local button="$1"; shift
		case "$button" in
		1) wmiir xwrite /ctl "view $*";;
		2) ;; #menu
		3) ;; #close?
		4) wmiir xwrite /ctl "view $(prev_tag)";;
		5) wmiir xwrite /ctl "view $(next_tag)";;
		esac
		;;

	RightBarClick)
		local button="$1"; shift
		case "$*" in
		mpc)
			case "$button" in
			1) mpc toggle;;
			2) mpc prev;;
			3) mpc next;;
			4) mpc volume "+5";;
			5) mpc volume "-5";;
			esac > /dev/null
			;;
		esac
		;;

	LeftBarDND)
		shift
		wmiir xwrite /ctl "view $*"
		;;
	
	ClientMouseDown)
		local client="$1" button="$2" cmd=""
		case "$button" in
		3)
			cmd="$(wmii9menu -- '- wmii -' \
				'close window:kill' \
				'kill client:slay' \
				'full screen:zoom' \
				)"
			case "$cmd" in
				kill) wmiir xwrite "/client/$client/ctl" "kill";;
				slay) wmiir xwrite "/client/$client/ctl" "slay";;
				zoom) wmiir xwrite "/client/$client/ctl" "fullscreen on";;
			esac
			;;
		esac
		;;

	Unresponsive)
		local client="$1"
		msg="$(printf "The following client is not responding:\n\n%s\n\nWhat would you like to do?" "$(wmiir read /client/"$client"/label)")"

		if ! wihack -transient "$client" zenity --question --text="$msg" \
			--ok-label="Wait" --cancel-label="Kill"; then
			wmiir xwrite "/client/$client/ctl" "slay"
		fi &

		#case "$(wihack -transient "$client" xmessage -nearmouse -buttons Kill,Wait -print -fn "${WMII_FONT%%,*}" "$msg")" in
		#Kill) wmiir xwrite /client/"$client"/ctl slay
		#esac
		;;

	Key)
		event_$evtype "$@"
		;;

	# Debugging through 'wmiir write /event'
	eval)
		{
			echo -e "\033[1m-> $@\033[m"
			eval "$@"
		} >> "${WMII_CONFPATH%%:*}/eval.txt" 2>&1
		;;
	esac
	return 0
}

#declare -F | sed -n -e "s/^declare -f //; /^key_/ {s/^key/${MODKEY}/; y/_/-/; p}" | wmiir write /keys

event_Key() {
	local key="$1" mod=""
	if [[ "$key" == *-* ]]; then
		mod="${key%-*}"
		key="${key##*-}"
	fi
	# echo "== ($$) Key: [$mod] $key"

	case "$mod" in

	$MODKEY)
	case "$key" in
		h) wmiir xwrite /tag/sel/ctl "select left";;
		j) wmiir xwrite /tag/sel/ctl "select down";;
		k) wmiir xwrite /tag/sel/ctl "select up";;
		l) wmiir xwrite /tag/sel/ctl "select right";;
		space) wmiir xwrite /tag/sel/ctl "select toggle";;
		[0-9]) wmiir xwrite /ctl "view $key";;

		d) wmiir xwrite /tag/sel/ctl "colmode sel default-max";;
		s) wmiir xwrite /tag/sel/ctl "colmode sel stack-max";;
		m) wmiir xwrite /tag/sel/ctl "colmode sel stack+max";;

		f) wmiir xwrite /client/sel/ctl "fullscreen toggle";;

		p)
			local input="$(wimenu -h "$WMII_HISTORY" -n 20 < "$(wmiir namespace)/programs.cache")"
			[[ "$input" ]] && {
				echo "=> eval (program): $input"
				#eval "$input"
				eval wmiir setsid -f "$input"
			}
			;;

		a)
			local input="$({
				echo 'quit'
				echo 'restart-wmii'
				echo 'restart-rc'
				echo 'rehash-proglist'
				} | wimenu -p 'action:' -h "${WMII_HISTORY}.actions")"
			[ "$input" ] && {
				set -- $input
				local action="$1"; shift
				echo "=> action: $action $*"
				case "$action" in
				quit)
					wmiir xwrite /event "Suicide"
					wmiir xwrite /ctl "quit"
					;;
				rehash-proglist)
					proglist "$PATH" > "$(wmiir namespace)/programs.cache" &
					;;
				restart-rc)
					wmiir setsid -f $0
					;;
				restart-wmii)
					wmiir xwrite /ctl "exec wmii" ;;
				exec)
					wmiir xwrite /ctl "exec $*" ;;
				ctl)
					wmiir xwrite /ctl "$*" ;;
				eval)
					eval "$*" ;;
				esac
			}
			;;

		t)
			local input="$(tags | wimenu -p 'view tag:' -h "${WMII_HISTORY}.tags")"
			[ "$input" ] && wmiir xwrite "/ctl" "view $input"
			;;

		q) wmiir xwrite /client/sel/ctl "kill" ;;

		Return) spawn "$WMII_TERM";;
	esac;;
	
	$MODKEY-Shift)
	case "$key" in
		h) wmiir xwrite /tag/sel/ctl "send sel left";;
		j) wmiir xwrite /tag/sel/ctl "send sel down";;
		k) wmiir xwrite /tag/sel/ctl "send sel up";;
		l) wmiir xwrite /tag/sel/ctl "send sel right";;
		space) wmiir xwrite /tag/sel/ctl "send sel toggle";;
		[0-9]) wmiir xwrite /client/sel/tags "$key";;

		t)
			local client="$(wmiir read /client/sel/ctl | sed 1q)"
			local input="$(tags | wimenu -p 'retag:' -h "${WMII_HISTORY}.tags")"
			[ "$input" ] && wmiir xwrite "/client/$client/tags" "$input"
			;;
	esac;;

	$MODKEY-Control)
	case "$key" in
		j) wmiir xwrite /tag/sel/ctl "select down stack";;
		k) wmiir xwrite /tag/sel/ctl "select up stack";;
	esac;;

	esac
}

proglist() {
	local dirs; IFS=":" read -a dirs <<< "$1"
	for dir in "${dirs[@]}"; do
		wmiir proglist -- "$(eval echo "$dir")"
	done | sort | uniq
}

mpstatus() {
	local FG_PLAYING='#bbbbbb'
	local FG_PAUSED="${WMII_NORMCOLORS%% *}"
	local FG_STOPPED='#666666'
	local BG="${WMII_NORMCOLORS#* }"

	if ! mpc >& /dev/null; then
		echo colors "$FG_STOPPED $BG"
		echo label "(mpd not running)"
		return $?
	elif mpc | grep -qs '^\[playing\]'; then
		echo colors "$FG_PLAYING $BG"
		echo label "$(mpc | sed 1q)"
	elif mpc | grep -qs '^\[paused\]'; then
		echo colors "$FG_PAUSED $BG"
		echo label "(paused) $(mpc | sed 1q)"
	else
		echo colors "$FG_STOPPED $BG"
		echo label "(stopped)"
	fi
}

mpstatus_update() {
	mpstatus | wmiir create /rbar/mpc
	while true; do
		mpc idle > /dev/null || sleep 5
		mpstatus | wmiir write /rbar/mpc
	done
}

# Bind keys
for key in \
	{h,j,k,l,space} \
	Shift-{h,j,k,l,space} \
	{0..9} \
	Shift-{0..9} \
	d s m f \
	a p t Shift-t \
	Return q \
	Control-{j,k}
do echo "$MODKEY-$key"; done | wmiir write /keys

# Set up tags
wmiir rm $(wmiir ls -p /lbar) > /dev/null
current="$(current_tag)"
tags | while read tag; do
	if [ "$tag" = "$current" ]; then
		echo colors "$WMII_FOCUSCOLORS"
		echo label "$tag"
	else
		echo colors "$WMII_NORMCOLORS"
		echo label "$tag"
	fi | wmiir create "/lbar/$tag"
done

# Cache proglist
proglist "$PATH" > "$(wmiir namespace)/programs.cache" &

wmiir create '/rbar/!' < /dev/null

# Event loop
echo "wmiirc[$$/$PGROUP] started"
wmiir write /event <<< "Start wmiirc"

startup

while read event; do
	event $event || {
		echo "wmiirc[$$/$PGROUP] quitting."
		echo "Killing pgroup $PGROUP"
		pkill -g $PGROUP
		break
	}
done < <(wmiir read /event) 2> /dev/null
