#!/bin/bash

### Configuration

# Bar/border colors (text, background, border)
WMII_NORMCOLORS="#888888 #222222 #333333"
WMII_FOCUSCOLORS="#ffffff #285577 #4c7899"
WMII_URGENTCOLORS="#ffffff #772828 #99784c"
WMII_BACKGROUND="#333333"
WMII_FONT="-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*"
WMII_TERM="xterm"

MODKEY="Mod4"

: ${WMII_CONFPATH:=${0%/*}}
WMII_CONFDIR="${WMII_CONFPATH%%:*}"

WMII_APP_OUTPUT="/dev/null"

[[ -f "$WMII_CONFDIR/config" ]] && . "$WMII_CONFDIR/config"

### Functions

# startup()			run startup/autorun programs (terminals and such)

startup() {
	witray -s 24 & echo "++ witray[$!]"

	statusloop & echo "++ statusloop[$!]"
	statusloop_mpd & echo "++ statusloop_mpd[$!]"

	[[ -f "$WMII_CONFDIR/startup" ]] && . "$WMII_CONFDIR/startup"
}

# spawn(args)		launch a program in its own session

spawn() { cd; wmiir setsid -f "$@" < /dev/null > "$WMII_APP_OUTPUT" 2>&1; }

# log()				write line to stdout and debug.log

log() {
	#local tag="$$/$BASHPID"
	echo -e "wmiirc[$$]: $*"
	echo -e "\033[34m($$)\033[m $*" >> "$WMII_CONFDIR/debug.log"
}

# tags()			list all tags
# this_tag()		return current tag
# this_tag_safe()	as above, but escape sed metacharacters
# next_tag()		return next tag (wrap around to first)
# prev_tag()		return previous tag (wrap around)
# destroy_tag(tag)	kill all clients in a tag

tags() {
	wmiir ls /tag | sed 's|/$||; /^sel$/d'
}
this_tag() {
	wmiir read /tag/sel/ctl | head -n 1
}
this_tag_safe() {
	this_tag | sed 's/[][/\\.*&^$]/\\&/g'
}
next_tag() {
	tags | sed -n "1h;/^$(this_tag_safe)\$/{\${g;p};n;p;q}"
}
prev_tag() {
	(tags | sed -n "/^$(this_tag_safe)\$/{1q42;g;p;q};h") || (tags | sed -n "\$p")
}

destroy_tag() {
	local tag="$1"
	local client
	wmiir read "/tag/$tag/index" | awk '!/^#/ {print $2}' | while read client; do
		if [[ "$tag" == "$(wmiir read "/client/$client/tags")" ]]
			then wmiir xwrite "/client/$client/ctl" "kill"
			else wmiir xwrite "/client/$client/ctl" "tags -$tag"
		fi
	done
	if [[ "$tag" == "$(this_tag)" ]]; then
		wmiir xwrite "/ctl" "view $(next_tag)"
	fi
}

# this_client()			return currently selected client ID
# client_pid(client)	return PID of client (if known; exit 1 otherwise)

this_client() {
	wmiir read /client/sel/ctl | head -n 1
}
client_pid() {
	wmiir read "/client/$1/ctl" | awk '/^pid / {print $2; exit} END {exit 1}'
}

# program_menu()		display wimenu with programs
# action_menu(*actions)	display wimenu with given actions
# tag_menu()			display wimenu with current tags
#
# program_cache()		rebuild program cache used by program_menu()
#
# program_input()		call program_menu() and execute user input
# action_input()		call action_menu() and execute given action

program_menu() {
	wimenu -h "$WMII_CONFDIR/history" -n 20 < "$(wmiir namespace)/programs.cache"
}
program_cache() {
	local IFS=:
	wmiir proglist -- $PATH > "$(wmiir ns)/programs.cache"
}
action_menu() {
	for action; do
		echo "$action"
	done | wimenu -p "action:"
}
tag_menu() {
	tags | wimenu -p "${1:-view tag}:" -h "$WMII_CONFDIR/history.tags" -n 20
}

program_input() {
	local input="$(program_menu)"
	[[ "$input" ]] && eval wmiir setsid -f "$input"
}

action_input() {
	local input="$(action_menu 'quit' 'rc' 'exec wmii' 'exec' 'proglist')"
	[[ "$input" ]] && {
		set -- $input
		local action="$1"; shift
		case "$action" in
		ctl)
			wmiir xwrite /ctl "$*" ;;
		eval)
			eval "$*" ;;
		exec)
			wmiir xwrite /ctl "exec $*" ;;
		quit)
			wmiir xwrite /event "Suicide"
			wmiir xwrite /ctl "quit"
			;;
		proglist)
			program_cache &
			;;
		rc)
			restart_rc ;;
		esac
	}
}

# display_client_info(client)	display an information window for given client

display_client_info() {
	local client="$1"
	local pid="$(client_pid "$client")"
	local winst wclass wlabel
	IFS=':' read winst wclass wlabel < <( wmiir read "/client/$client/props" )

	{
		echo -e "Instance:\t$winst"
		echo -e "Class:\t$wclass"
		echo -e "Label:\t$wlabel"
		if [[ "$pid" ]]
			then echo -e "Process:\t($pid) $(ps -o 'cmd=' $pid)"
			else echo -e "Process:\tunknown"
		fi
		echo "Control:"
		wmiir read "/client/$client/ctl" | sed 's/^/\t/'
		echo "Properties:"
		wmiir read "/client/$client/props" | sed 's/^/\t/'
	} | wmiir setsid -f wihack -transient "$client" \
		zenity --text-info --title="Client $client"
}

# htmlescape()				convert special HTML characters to HTML entities

htmlescape() { sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g'; }

### Event handling
# event(type, *args)		the event handler function

event() {
	local evtype="$1"; shift
	case "$evtype" in
	Start)
		log "quitting (received Start event from another wmiirc)"
		return 1
		;;
	Suicide)
		log "quitting (received shutdown request)"
		return 1
		;;
	Respawn)
		log "restarting self"
		restart_rc
		;;

	CreateTag)
		{	echo colors "$WMII_NORMCOLORS"
			echo label "$*"
		} | wmiir create "/lbar/$*"
		;;
	DestroyTag)
		wmiir remove "/lbar/$*"
		;;

	FocusTag)
		{	echo colors "$WMII_FOCUSCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	UnfocusTag)
		{	echo colors "$WMII_NORMCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;

	UrgentTag)
		shift
		{	echo colors "$WMII_URGENTCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	NotUrgentTag)
		shift
		{	if [ "$*" = "$(this_tag)" ]; then
				echo colors "$WMII_FOCUSCOLORS"
			else
				echo colors "$WMII_NORMCOLORS"
			fi
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;

	LeftBarMouseDown)
		local button="$1"; shift
		case "$button" in
		1) wmiir xwrite /ctl "view $*";;
		2) ;;
		3) ;;
		4) wmiir xwrite /ctl "view $(prev_tag)";;
		5) wmiir xwrite /ctl "view $(next_tag)";;
		esac
		;;

	LeftBarClick)
		local button="$1"; shift
		case "$button" in
		1) wmiir xwrite /ctl "view $*";;
		2) destroy_tag "$*";;
		esac
		;;

	# drag'n'drop
	LeftBarDND)
		shift
		wmiir xwrite /ctl "view $*"
		;;

	RightBarClick)
		local button="$1"; shift
		case "$*" in
		"mpc")
			case "$button" in
			1) mpc toggle || spawn mpd ;;
			2) mpc prev ;;
			3) mpc next ;;
			4) mpc volume "+5" ;;
			5) mpc volume "-5" ;;
			esac > /dev/null ;;
		*)
			case "$button" in
			2) spawn slock ;;
			esac ;;
		esac
		;;
	
	ClientMouseDown)
		local client="$1" button="$2"
		case "$button" in
		3)
			local menuitems=(
				"close"
				"kill"
				"info"
				"retag"
				"float"
				"fullscreen"
				)
			local cmd="$(wmii9menu -i "info" -- "${menuitems[@]}")"
			case "$cmd" in
				close)
					wmiir xwrite "/client/$client/ctl" "kill";;
				float)
					wmiir xwrite "/tag/sel/ctl" "send $client toggle";;
				fullscreen)
					wmiir xwrite "/client/$client/ctl" "fullscreen on";;
				info)
					display_client_info "$client";;
				kill)
					local label pid process message
					client_label="$(wmiir read "/client/$client/label" | htmlescape)"
					pid="$(client_pid "$client")"
					if [[ "$pid" ]]
						then process="<b>$(ps -o 'cmd=' $pid | htmlescape)</b> (PID $pid)"
						else process="<i>unknown</i>"
					fi
					msg="Do you really want to disconnect the process that this window belongs to?\n\nWindow:\t${client_label}\nProcess:\t${process}"
					{
						wihack -transient "$client" \
						zenity --question --title="Disconnect process" \
						--text="$msg" \
						--ok-label="Cancel" --cancel-label="Disconnect" \
						|| wmiir xwrite "/client/$client/ctl" "slay"
					} &
					;;
				retag)
					local label tags input
					client_label="$(wmiir read "/client/$client/label")"
					old_tags="$(wmiir read "/client/$client/tags")"
					{
						input="$(zenity --entry --title="Retag" \
						--text="Enter new tags for window:\n$client_label" \
						--entry-text="$old_tags")"

						[[ "$input" ]] && wmiir xwrite "/client/$client/tags" "${input// /+}"
					} &
					;;
			esac
			;;
		esac
		;;

	ClientClick)
		local client="$1" button="$2"
		case "$button" in
		2) wmiir xwrite "/client/$client/ctl" "kill";;
		esac
		;;

	Unresponsive)
		local client="$1"
		local msg="$(printf "The following client is not responding:\n\n%s\n\nWhat would you like to do?" "$(wmiir read /client/"$client"/label)")"

		if ! wihack -transient "$client" zenity --question --text="$msg" \
			--ok-label="Wait" --cancel-label="Kill"; then
			wmiir xwrite "/client/$client/ctl" "slay"
		fi &
		;;

	Key)
		event_Key "$@"
		;;

	# Debugging through 'wmiir write /event'
	Debug)
		{
			printf "\033[34m($$)\033[m Debug: \033[1m%s\033[m\n" "$*"
			eval set -- "$*"
			local cmd="$1"; shift
			case "$cmd" in
			rule)		{ wmiir read /rules; echo "$*"; } | wmiir write /rules;;
			c|ctl)		wmiir xwrite /ctl "$@";;
			e|eval)		eval "$@";;
			ev|event)	wmiir xwrite /event "$@";;
			.|poke)		echo -e "\e[1;35mI am $$ (pgroup $MY_PGROUP, sid $MY_SID)\e[m";;
			p|ps)		wmiir setsid ps -o pid,comm,command --forest -$MY_PGROUP;;
			r|read)		wmiir read "$@";;
			qr)			wmiir xwrite /event "Suicide";;
			qw)			wmiir xwrite /ctl "quit";;
			restart)
				if [ "$1" = "wmii" ]; then
					restart_wmii
				else
					restart_rc
				fi
				;;
			re)			restart_rc;;
			rw)			restart_wmii;;
			x|ixp|wmiir)	wmiir "$@";;
			w|write)	wmiir xwrite "$@";;
			\?|help)
				cat <<-'EOF'
				Commands:
				.   poke
				c   ctl <ctl command>
				e   eval <shell code>
				ev  event <evtype> [<args>]
				p   ps
				qr  quit wmiirc
				qw  quit wmii
				r   read <path>
				re  restart
				rw  restart wmii
				w   write <path> <data>
				x   ixpc (wmiir)
				EOF
				;;
			*)			echo -e "\e[1;33mUnknown debug command '$cmd'. Try 'help'\e[m";;
			esac
		} >> "$WMII_CONFDIR/debug.log" 2>&1
		;;
	esac
	return 0
}

# BIND_KEYS[]			keys to be bound (should match the list in event_Key)
# event_Key(key)		keypress event handler

BIND_KEYS=(
	$MODKEY-{a,d,f,h,j,k,l,m,p,q,s,t}
	$MODKEY-{0..9}
	$MODKEY-KP_Enter
	$MODKEY-Menu
	$MODKEY-Return
	$MODKEY-space

	$MODKEY-Shift-{d,h,j,k,l,t}
	$MODKEY-Shift-{0..9}
	$MODKEY-Shift-space

	$MODKEY-Control-{h,j,k,l}

	Menu
	Control-Menu
)

event_Key() {
	local key="$1" modifier=""
	if [[ "$key" == *-* ]]; then
		modifier="${key%-*}"
		key="${key##*-}"
	fi

	case "$modifier" in
	$MODKEY) case "$key" in
		a)	action_input;;
		d)	wmiir xwrite /tag/sel/ctl "colmode sel default-max";;
		f)	wmiir xwrite /client/sel/ctl "fullscreen toggle";;
		h)	wmiir xwrite /tag/sel/ctl "select left";;
		j)	wmiir xwrite /tag/sel/ctl "select down";;
		k)	wmiir xwrite /tag/sel/ctl "select up";;
		l)	wmiir xwrite /tag/sel/ctl "select right";;
		m)	wmiir xwrite /tag/sel/ctl "colmode sel stack+max";;
		p)	program_input;;
		q)	wmiir xwrite /client/sel/ctl "kill";;
		s)	wmiir xwrite /tag/sel/ctl "colmode sel stack-max";;
		t)	local input="$(tag_menu)"
			[[ "$input" ]] && wmiir xwrite "/ctl" "view $input"
			;;
		[0-9])		wmiir xwrite /ctl "view $key";;
		KP_Enter)	spawn "$WMII_TERM";;
		Menu)		action_input ;;
		Return)		spawn "$WMII_TERM";;
		space)		wmiir xwrite /tag/sel/ctl "select toggle";;
		esac;;
	
	$MODKEY-Shift) case "$key" in
		d)	wmiir xwrite /tag/sel/ctl "colmode sel default+max";;
		h)	wmiir xwrite /tag/sel/ctl "send sel left";;
		j)	wmiir xwrite /tag/sel/ctl "send sel down";;
		k)	wmiir xwrite /tag/sel/ctl "send sel up";;
		l)	wmiir xwrite /tag/sel/ctl "send sel right";;
		t)	local client="$(this_client)"
			local input="$(tag_menu 'retag')"
			[[ "$input" ]] && wmiir xwrite "/client/$client/tags" "$input"
			;;
		[0-9])	wmiir xwrite /client/sel/tags "$key";;
		space)	wmiir xwrite /tag/sel/ctl "send sel toggle";;
		esac;;

	$MODKEY-Control) case "$key" in
		h)	wmiir xwrite /client/sel/tags "$(prev_tag)";;
		j)	wmiir xwrite /tag/sel/ctl "select down stack";;
		k)	wmiir xwrite /tag/sel/ctl "select up stack";;
		l)	wmiir xwrite /client/sel/tags "$(next_tag)";;
		esac;;

	"") case "$key" in
		Menu)	program_input;;
		esac;;

	Control) case "$key" in
		Menu)	program_cache; program_input;;
		esac;;

	esac
}

## Loops for statusbar updating. Called from startup()
# statusloop()			updates clock and load average
# statusloop_mpd()		updates mpd playback status
#
# status_load()			prints load average from /proc/loadavg
# status_clock()		prints date/time
# status_mpd()			prints mpd status

statusloop() {
	printf "wistatus" > /proc/self/comm
	local path

	while true; do
		path="/rbar/zy_load"
		status_load | { wmiir write "$path" || wmiir create "$path"; }

		path="/rbar/zz_clock"
		status_clock | { wmiir write "$path" || wmiir create "$path"; }

		sleep 2
	done
}
statusloop_mpd() {
	printf "wistatus.mpd" > /proc/self/comm
	local path="/rbar/mpc"

	status_mpd | wmiir create /rbar/mpc
	while true; do
		mpc idle >& /dev/null || sleep 5
		status_mpd | { wmiir write "$path" || wmiir create "$path"; }
	done
}

status_load() {
	local load1 load2 load3 rest
	read load1 load2 load3 rest < /proc/loadavg
	echo colors "$WMII_NORMCOLORS"
	echo label "$load1 $load2 $load3"
}
status_clock() {
	echo colors "$WMII_NORMCOLORS"
	date +'label %a, %b %d %H:%M'
}
status_mpd() {
	local FG_PLAYING='#bbbbbb'
	local FG_PAUSED="${WMII_NORMCOLORS%% *}"
	local FG_STOPPED='#666666'
	local BG="${WMII_NORMCOLORS#* }"
	{
		if ! mpc > /dev/null; then
			local ret=$?
			echo colors "$FG_STOPPED $BG"
			echo label "(mpd not running)"
			return $ret
		elif mpc | grep -qs '^\[playing\]'; then
			echo colors "$FG_PLAYING $BG"
			echo label "$(mpc current)"
		elif mpc | grep -qs '^\[paused\]'; then
			echo colors "$FG_PAUSED $BG"
			echo label "(paused) $(mpc current)"
		else
			echo colors "$FG_STOPPED $BG"
			echo label "(stopped)"
		fi
	} 2> /dev/null
}

## wmiirc control functions
# suicide()				kill own pgroup; SIGINT/TERM/QUIT handler
# restart_rc()			tell wmii to spawn a new wmiirc
# restart_wmii()		tell wmii to re-exec self

suicide() {
	log "\e[1;31mExiting:\e[m killing pgroup $MY_PGROUP"
	trap - TERM; kill 0
}
restart_rc() {
	log "\e[33mrestarting wmiirc\e[m ($0)"
	wmiir xwrite /ctl "spawn $0"
}
restart_wmii() {
	log "\e[33mrestarting wmii\e[m"
	wmiir xwrite /ctl "exec wmii"
}

### Start wmiirc
cd ~

wmiir namespace > /dev/null || exit 1

MY_PGROUP="$(ps -o 'pgrp=' $$ | tr -d ' ')"
MY_SID="$(ps -o 'sid=' $$ | tr -d ' ')"

trap 'suicide' SIGINT SIGQUIT SIGTERM EXIT
trap 'log "Received SIGHUP"; restart_rc' SIGHUP

log "\e[1;32mstarted\e[m ($0) \e[1mpgroup=$MY_PGROUP\e[m sid=$MY_SID"
wmiir write /event <<< "Start $0"

# Configure wmii
wmiir write /ctl <<-!
	font $WMII_FONT
	fontpad ${WMII_FONTPAD:-0 0 0 0}
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod ${MODKEY:-Mod4}
	colmode default
	border 2
!

xsetroot -solid "$WMII_BACKGROUND" &

{
	# Load window and column rules
	[[ -f "$WMII_CONFDIR/rules" ]] &&
		wmiir write /rules < "$WMII_CONFDIR/rules"

	[[ -f "$WMII_CONFDIR/colrules" ]] &&
		wmiir write /colrules < "$WMII_CONFDIR/colrules"

	# Bind keys
	echo "${BIND_KEYS[@]}" | tr ' ' '\n' | wmiir write /keys

	# Set up tags and rbar
	wmiir ls -p /lbar /rbar | xargs wmiir rm

	current="$(this_tag)"
	tags | while read tag; do
		if [ "$tag" = "$current" ]; then
			echo colors "$WMII_FOCUSCOLORS"
			echo label "$tag"
		else
			echo colors "$WMII_NORMCOLORS"
			echo label "$tag"
		fi | wmiir create "/lbar/$tag"
	done

	wmiir create '/rbar/!' < /dev/null

	# Rebuild program cache
	program_cache &

	# Run startup programs
	startup
} &

# Event loop
while read event; do
	event $event || suicide
done < <(exec wmiir read /event)

# Cleanup
log "Eventloop finished"
