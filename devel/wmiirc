#!/bin/bash
# vi: ft=sh
cd ~
wmiir namespace || exit 1

WMII_BACKGROUND="#333333"
WMII_FONT='-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'

# UI colors (text, background, border)
WMII_NORMCOLORS="#888888 #222222 #333333"
WMII_FOCUSCOLORS="#ffffff #285577 #4c7899"
WMII_URGENTCOLORS="#ffffff #772828 #99784c"

MODKEY="Mod4"

WMII_TERM="xterm"

: ${WMII_CONFPATH:=${0%/*}}
WMII_HISTORY="${WMII_CONFPATH%%:*}/history"
WMII_STARTUP="${WMII_CONFPATH%%:*}/startup"

WMII_APP_OUTPUT="/dev/null"

spawn() { cd; wmiir setsid -f "$@" > "$WMII_APP_OUTPUT" 2>&1; }

startup() {
	witray -s 24 & echo "++ witray[$!]"

	status | wmiir create /rbar/status
	while status; do
		sleep 1
	done & echo "++ status[$!]"

	mpstatus_update & echo "++ mpstatus_update[$!]"

	[[ -f "$WMII_STARTUP" ]] && . "$WMII_STARTUP"
}

wmiir write /ctl <<-!
	font $WMII_FONT
	fontpad 1 1 1 1
	focuscolors $WMII_FOCUSCOLORS
	normcolors $WMII_NORMCOLORS
	grabmod $MODKEY
	colmode default
	border 1
!
xsetroot -solid "$WMII_BACKGROUND" &

# /client/*/props -> instance:class:label
wmiir write /rules <<-'!'
	#/./ floating=on continue

	#/MPlayer|VLC/ floating=on
	/^ffplay:/ floating=on

	/^witray:witray:witray$/ floating=always

	/^seahorse-agent:Seahorse-agent:/ floating=on
	/^bluetooth-properties:/ floating=on
	/^xloadimage:/ floating=on
	/^proximity.py:/ floating=on

	/^Pidgin:/ allow=+activate

	/^gnome-terminal:/ group=0
	/^ROX-Filer:/ group=0
	/^nm-applet:/ group=0
!
wmiir write /colrules <<-'!'
	/gimp/ -> 17+83+41
	/.*/ -> 62+38 # Golden Ratio
!

status() {
	echo -n label $(uptime | sed 's/.*://; s/,//g') \
		'|' $(date +'%A, %b %d %H:%M') \
		| wmiir write /rbar/status
}

tags() { wmiir ls /tag | sed 's|/$||; /^sel$/d'; }
this_tag() { wmiir read /tag/sel/ctl | head -n 1; }
next_tag() { tags | sed -n "1h;/^$(this_tag)\$/{\${g;p};n;p;q}"; }
prev_tag() { (tags | sed -n "/^$(this_tag)\$/{1q42;g;p;q};h") || (tags | sed -n "\$p"); }

this_client() { wmiir read /client/sel/ctl | head -n 1; }
client_pid() { wmiir read "/client/$1/ctl" | awk '/^pid /{print $2}'; }

program_menu() {
	{ tac "$WMII_HISTORY"; cat "$(wmiir namespace)/programs.cache"; } | \
		wimenu -h "$WMII_HISTORY" -n 20
}
action_menu() {
	for action; do
		echo "$action"
	done | wimenu -p "action:"
}
tag_menu() {
	tags | wimenu -p "${1:-view tag}:" -h "${WMII_HISTORY}.tags" -n 20
}

program_input() {
	local input="$(program_menu)"
	[[ "$input" ]] && eval wmiir setsid -f "$input"
}
action_input() {
	local input="$(action_menu 'quit' 'rc' 'wmii' 'exec' 'proglist')"
	[[ "$input" ]] && {
		set -- $input
		local action="$1"; shift
		case "$action" in
		quit)
			wmiir xwrite /event "Suicide"
			wmiir xwrite /ctl "quit"
			;;
		proglist)
			proglist "$PATH" > "$(wmiir namespace)/programs.cache" &
			;;
		rc)
			wmiir xwrite /ctl "spawn $0" ;;
		wmii)
			wmiir xwrite /ctl "exec wmii" ;;
		exec)
			wmiir xwrite /ctl "exec $*" ;;
		ctl)
			wmiir xwrite /ctl "$*" ;;
		eval)
			eval "$*" ;;
		esac
	}
}

program_cache() {
	proglist "$PATH" > "$(wmiir namespace)/programs.cache"
}

display_client_info() {
	local client="$1"
	local pid="$(client_pid "$client")"
	local winst wclass wlabel
	IFS=':' read winst wclass wlabel < <( wmiir read "/client/$client/props" )

	{
		echo -e "Instance:\t$winst"
		echo -e "Class:\t$wclass"
		echo -e "Label:\t$wlabel"
		if [[ "$pid" ]]
			then echo -e "Process:\t($pid) $(ps -o 'cmd=' $pid)"
			else echo -e "Process:\tunknown"
		fi
		echo "Control:"
		wmiir read "/client/$client/ctl" | sed 's/^/\t/'
		echo "Properties:"
		wmiir read "/client/$client/props" | sed 's/^/\t/'
	} | spawn wihack -transient "$client" \
		zenity --text-info --title="Client $client"
}

htmlescape() { sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g'; }

event() {
	local evtype="$1"; shift
	case "$evtype" in
	Start)
		return 1
		;;
	CreateTag)
		{	echo colors "$WMII_NORMCOLORS"
			echo label "$*"
		} | wmiir create "/lbar/$*"
		;;
	DestroyTag)
		wmiir remove "/lbar/$*"
		;;
	FocusTag)
		{	echo colors "$WMII_FOCUSCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	UnfocusTag)
		{	echo colors "$WMII_NORMCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	UrgentTag)
		shift
		{	echo colors "$WMII_URGENTCOLORS"
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;
	NotUrgentTag)
		shift
		{	if [ "$*" = "$(this_tag)" ]; then
				echo colors "$WMII_FOCUSCOLORS"
			else
				echo colors "$WMII_NORMCOLORS"
			fi
			echo label "$*"
		} | wmiir write "/lbar/$*"
		;;

	LeftBarClick)
		local button="$1"; shift
		case "$button" in
		1) wmiir xwrite /ctl "view $*";;
		2) ;; #menu
		3) ;; #close?
		4) wmiir xwrite /ctl "view $(prev_tag)";;
		5) wmiir xwrite /ctl "view $(next_tag)";;
		esac
		;;
	LeftBarDND)
		shift
		wmiir xwrite /ctl "view $*"
		;;

	RightBarMouseDown)
		local button="$1"; shift
		case "$*" in
		"mpc")
			case "$button" in
			3)
				local choice="$(wmii9menu -i 'next' -- \
					"playlist" \
					"play/pause:toggle" \
					"previous:prev" \
					"next" \
				)"
				case "$choice" in
				playlist)
					spawn $WMII_TERM -e ncmpcpp;;
				toggle)
					mpc toggle;;
				prev)
					mpc prev;;
				next)
					mpc next;;
				esac > /dev/null
				;;
			esac
			;;
		"status")
			case "$button" in
			3)
				local choice="$(wmii9menu -i 'terminal' -- \
					"quit wmii:quit" \
					"terminal" \
				)"
				case "$choice" in
				quit)
					wmiir xwrite /event "Suicide"
					wmiir xwrite /ctl "quit"
					;;
				terminal)
					spawn "$WMII_TERM" ;;
				esac
				;;
			esac
			;;
		esac
		;;
	RightBarClick)
		local button="$1"; shift
		case "$*" in
		"mpc")
			case "$button" in
			1) mpc toggle ;;
			2) mpc prev ;;
			#3) mpc next ;;
			4) mpc volume "+5" ;;
			5) mpc volume "-5" ;;
			esac > /dev/null ;;
		"status")
			case "$button" in
			1) spawn slock ;;
			esac ;;
		esac
		;;
	
	ClientMouseDown)
		local client="$1" button="$2" cmd=""
		case "$button" in
		3)
			cmd="$(wmii9menu -i "info" -- \
				"close" \
				"kill" \
				"fullscreen" \
				"info" \
				"retag" \
			)"
			case "$cmd" in
				close)
					wmiir xwrite "/client/$client/ctl" "kill"
					;;
				kill)
					local wlabel="$(wmiir read "/client/$client/label" | htmlescape)"
					local pid="$(client_pid "$client")"
					if [[ "$pid" ]]
						then local process="<b>$(ps -o 'cmd=' $pid | htmlescape)</b> (PID $pid)"
						else local process="<i>unknown</i>"
					fi
					local msg="Do you really want to disconnect the process that this window belongs to?\n\nWindow:\t${wlabel}\nProcess:\t${process}"

					zenity --question --title="Disconnect process" --text="$msg" \
						--ok-label="Cancel" --cancel-label="Disconnect" \
						|| wmiir xwrite "/client/$client/ctl" "slay"
					;;
				fullscreen)
					wmiir xwrite "/client/$client/ctl" "fullscreen on"
					;;
				info)
					display_client_info "$client"
					;;
				retag)
					local wlabel="$(wmiir read "/client/$client/label")"
					local wtags="$(wmiir read "/client/$client/tags")"
					local input="$(zenity --entry --title="Retag" \
						--text="Enter new tags for window:\n$wlabel" \
						--entry-text="$wtags")"
					[ "$input" ] && wmiir xwrite "/client/$client/tags" "${input// /+}"
					;;
			esac
			;;
		esac
		;;

	ClientClick)
		local client="$1" button="$2"
		case "$button" in
		2) wmiir xwrite "/client/$client/ctl" "kill";;
		esac
		;;

	Unresponsive)
		local client="$1"
		local msg="$(printf "The following client is not responding:\n\n%s\n\nWhat would you like to do?" "$(wmiir read /client/"$client"/label)")"

		if ! wihack -transient "$client" zenity --question --text="$msg" \
			--ok-label="Wait" --cancel-label="Kill"; then
			wmiir xwrite "/client/$client/ctl" "slay"
		fi &
		;;

	Key)
		event_$evtype "$@"
		;;

	# Debugging through 'wmiir write /event'
	eval)
		{
			echo -e "\033[1m-> $@\033[m"
			eval "$@"
		} >> "${WMII_CONFPATH%%:*}/eval.txt" 2>&1
		;;

	hup)
		wmiir xwrite /ctl "spawn $0"
		;;
	esac
	return 0
}

#declare -F | sed -n -e "s/^declare -f //; /^key_/ {s/^key/${MODKEY}/; y/_/-/; p}" | wmiir write /keys

event_Key() {
	local key="$1" mod=""
	if [[ "$key" == *-* ]]; then
		mod="${key%-*}"
		key="${key##*-}"
	fi

	case "$mod" in

	$MODKEY)
		case "$key" in
		h) wmiir xwrite /tag/sel/ctl "select left";;
		j) wmiir xwrite /tag/sel/ctl "select down";;
		k) wmiir xwrite /tag/sel/ctl "select up";;
		l) wmiir xwrite /tag/sel/ctl "select right";;
		space) wmiir xwrite /tag/sel/ctl "select toggle";;
		[0-9]) wmiir xwrite /ctl "view $key";;
		d) wmiir xwrite /tag/sel/ctl "colmode sel default-max";;
		s) wmiir xwrite /tag/sel/ctl "colmode sel stack-max";;
		m) wmiir xwrite /tag/sel/ctl "colmode sel stack+max";;

		f) wmiir xwrite /client/sel/ctl "fullscreen toggle";;
		q) wmiir xwrite /client/sel/ctl "kill" ;;

		Return) spawn "$WMII_TERM" ;;

		p) program_input ;;
		Menu) action_input ;;
		a) action_input ;;

		t)
			local input="$(tag_menu)"
			[[ "$input" ]] && wmiir xwrite "/ctl" "view $input"
			;;
		esac;;
	
	$MODKEY-Shift)
		case "$key" in
		h) wmiir xwrite /tag/sel/ctl "send sel left";;
		j) wmiir xwrite /tag/sel/ctl "send sel down";;
		k) wmiir xwrite /tag/sel/ctl "send sel up";;
		l) wmiir xwrite /tag/sel/ctl "send sel right";;
		space) wmiir xwrite /tag/sel/ctl "send sel toggle";;
		[0-9]) wmiir xwrite /client/sel/tags "$key";;

		d) wmiir xwrite /tag/sel/ctl "colmode sel default+max";;

		t)
			local client="$(this_client)"
			local input="$(tag_menu 'retag')"
			[[ "$input" ]] && wmiir xwrite "/client/$client/tags" "$input"
			;;
		esac;;

	$MODKEY-Control)
		case "$key" in
		j) wmiir xwrite /tag/sel/ctl "select down stack";;
		k) wmiir xwrite /tag/sel/ctl "select up stack";;
		esac;;

	"")
		case "$key" in
		Menu) program_input ;;
		esac;;

	Control)
		case "$key" in
		Menu) program_cache; program_input ;;
		esac;;

	esac
}

proglist() {
	local dirs; IFS=":" read -a dirs <<< "$1"
	for dir in "${dirs[@]}"; do
		wmiir proglist -- "$(eval echo "$dir")"
	done | sort | uniq
}

mpstatus() {
	local FG_PLAYING='#bbbbbb'
	local FG_PAUSED="${WMII_NORMCOLORS%% *}"
	local FG_STOPPED='#666666'
	local BG="${WMII_NORMCOLORS#* }"

	{
		if ! mpc > /dev/null; then
			echo colors "$FG_STOPPED $BG"
			echo label "(mpd not running)"
			return $?
		elif mpc | grep -qs '^\[playing\]'; then
			echo colors "$FG_PLAYING $BG"
			echo label "$(mpc current)"
		elif mpc | grep -qs '^\[paused\]'; then
			echo colors "$FG_PAUSED $BG"
			echo label "(paused) $(mpc current)"
		else
			echo colors "$FG_STOPPED $BG"
			echo label "(stopped)"
		fi
	} 2> /dev/null
}

mpstatus_update() {
	mpstatus | wmiir create /rbar/mpc
	while true; do
		mpc idle >& /dev/null || sleep 5
		mpstatus | wmiir write /rbar/mpc
	done
}

# Bind keys
for key in \
	$MODKEY-{h,j,k,l,space,a,d,f,m,p,q,s,t} \
	$MODKEY-{0..9} \
	$MODKEY-Return \
	$MODKEY-Shift-{h,j,k,l,space,d} \
	$MODKEY-Shift-{0..9} \
	$MODKEY-Control-{j,k} \
	Menu \
	Control-Menu \
; do echo "$key"; done | wmiir write /keys

# Set up tags
wmiir rm $(wmiir ls -p /lbar) > /dev/null
current="$(this_tag)"
tags | while read tag; do
	if [ "$tag" = "$current" ]; then
		echo colors "$WMII_FOCUSCOLORS"
		echo label "$tag"
	else
		echo colors "$WMII_NORMCOLORS"
		echo label "$tag"
	fi | wmiir create "/lbar/$tag"
done

# Cache proglist
proglist "$PATH" > "$(wmiir namespace)/programs.cache" &

wmiir create '/rbar/!' < /dev/null

# Event loop
echo "wmiirc[$$] started: $0"
echo "- pgroup $(ps -o 'pgrp=' $$ | tr -d ' ')"

# Signal existing wmiirc to quit
wmiir write /event <<< "Start $0"

startup

while read event; do
	event $event || break
done < <(wmiir read /event)
# 'break' will not work properly if { wmiir | while read ... } is used

echo "wmiirc[$$] quitting."
kill 0
kill -9 0
